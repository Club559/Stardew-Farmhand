version: "{build}-ci"

# Environment configuration. --------------------------------------------------
environment:
  # Properties, passed to MSBuild project.
  VersionMajor: 0
  VersionMinor: 1
  VersionPatch: 0
init:
# Properties, passed to MSBuild project.
- ps: |
    $env:BuildDir = "$env:APPVEYOR_BUILD_FOLDER\.OUTPUT"
    $env:VersionBuild = "$env:APPVEYOR_BUILD_NUMBER"
    $env:VersionStage = "$env:APPVEYOR_REPO_BRANCH"
    $env:VersionTag = "$env:APPVEYOR_REPO_COMMIT"
  
matrix:
  # Fail whole build on first error.
  fast_finish: true

services:
# Enable IIS, which is needed for web client testing.
- iis
install:
- cmd: |
    git clone https://%GITLABUSR%:%GITLABPASS%@gitlab.com/ClxS/Tool.git C:\projects\stardew-farmhand\WorkingDirectory\tmp
    move C:\projects\stardew-farmhand\WorkingDirectory\tmp\*.* C:\projects\stardew-farmhand\WorkingDirectory
# Build configuration. --------------------------------------------------------
configuration:
- Release
build_script:
- ps: |
    nuget restore
    
    $buildCmd = "C:\Program Files (x86)\MSBuild\14.0\bin\msbuild.exe"
    $buildArgs = @(
      "/m",
      "/l:C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll",
      "/p:Configuration=$env:CONFIGURATION",
      "/v:m")
    
    # If build is not a scheduled one, than simply build project with MSBuild.
    if ($env:APPVEYOR_SCHEDULED_BUILD -ne "True") {
      & $buildCmd $buildArgs
      return
    }
    
    # Else, build project with Coverity Scan.
    "Building project with Coverity..."
    & "cov-build.exe" `
      --dir cov-int `
      --encoding=UTF-8 `
      $buildCmd $buildArgs
      
    # Compress results.
    "Compressing Coverity results..."
    $zipEncoderDef = @'
      namespace AnalyzeCode {
        public class PortableFileNameEncoder: System.Text.UTF8Encoding {
          public PortableFileNameEncoder() {}
          public override byte[] GetBytes(string entry) {
            return base.GetBytes(entry.Replace("\\", "/"));
          }
        }
      }
    '@
    Add-Type -TypeDefinition $zipEncoderDef
    [IO.Compression.ZipFile]::CreateFromDirectory(
      "$env:APPVEYOR_BUILD_FOLDER\cov-int",
      "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip",
      [IO.Compression.CompressionLevel]::Optimal,
      $true,  # include root directory
      (New-Object AnalyzeCode.PortableFileNameEncoder))
    
    # Upload results to Coverity server.
    "Uploading Coverity results..."
    Add-Type -AssemblyName "System.Net.Http"
    $client = New-Object Net.Http.HttpClient
    $client.Timeout = [TimeSpan]::FromMinutes(30)
    $form = New-Object Net.Http.MultipartFormDataContent
    # Fill token field.
    [Net.Http.HttpContent]$formField =
      New-Object Net.Http.StringContent($env:CoverityProjectToken)
    $form.Add($formField, "token")
    # Fill email field.
    $formField =
      New-Object Net.Http.StringContent($env:CoverityNotificationEmail)
    $form.Add($formField, "email")
    # Fill file field.
    $fs = New-Object IO.FileStream(
      "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip",
      [IO.FileMode]::Open,
      [IO.FileAccess]::Read)
    $formField = New-Object Net.Http.StreamContent($fs)
    $form.Add($formField, "file", "$env:APPVEYOR_PROJECT_NAME.zip")
    # Fill version field.
    $version = "$env:VersionMajor.$env:VersionMinor.$env:VersionPatch" +
      "-$env:VersionStage+$env:VersionBuild"
    $formField = New-Object Net.Http.StringContent($version)
    $form.Add($formField, "version")
    # Fill description field.
    $formField =
      New-Object Net.Http.StringContent("Scheduled CI server build.")
    $form.Add($formField, "description")
    # Submit form.
    $url = "https://scan.coverity.com/builds?project=$env:APPVEYOR_REPO_NAME"
    $task = $client.PostAsync($url, $form)
    try {
      $task.Wait()  # throws AggregateException on time-out
    } catch [AggregateException] {
      throw $_.Exception.InnerException
    }
    $task.Result
    $fs.Close()

# Other configuration. --------------------------------------------------------
# Use GitHub API for fast repository fetching.
shallow_clone: true
# Keep directory with third party tools between builds.
cache: third-party